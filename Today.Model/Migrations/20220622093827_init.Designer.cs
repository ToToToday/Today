// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Today.Model.Models;

namespace Today.Model.Migrations
{
    [DbContext(typeof(TodayDBContext))]
    [Migration("20220622093827_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Today.Model.Models.AboutProgram", b =>
                {
                    b.Property<int>("AboutProgramOptionsId")
                        .HasColumnType("int")
                        .HasColumnName("AboutProgramOptionsID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasIndex("AboutProgramOptionsId");

                    b.HasIndex("ProgramId");

                    b.ToTable("AboutProgram");
                });

            modelBuilder.Entity("Today.Model.Models.AboutProgramOption", b =>
                {
                    b.Property<int>("AboutProgramOptionsId")
                        .HasColumnType("int")
                        .HasColumnName("AboutProgramOptionsID");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IconClass")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AboutProgramOptionsId");

                    b.ToTable("AboutProgramOptions");
                });

            modelBuilder.Entity("Today.Model.Models.Category", b =>
                {
                    b.Property<int>("MinorCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("MinorCategoryID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.HasIndex("MinorCategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Today.Model.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<byte[]>("CityImg")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<string>("CityIntrod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsIsland")
                        .HasColumnType("bit");

                    b.HasKey("CityId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Today.Model.Models.CityRaider", b =>
                {
                    b.Property<int>("RaidersId")
                        .HasColumnType("int")
                        .HasColumnName("RaidersID");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RaidersId");

                    b.HasIndex("CityId");

                    b.ToTable("CityRaiders");
                });

            modelBuilder.Entity("Today.Model.Models.Collect", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.HasIndex("MemberId");

                    b.HasIndex("ProductId");

                    b.ToTable("Collect");
                });

            modelBuilder.Entity("Today.Model.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("date");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<int>("OrderDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("OrderDetailsID");

                    b.Property<int>("PartnerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PartnerTypeID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("RatingStar")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("MemberId");

                    b.HasIndex("OrderDetailsId");

                    b.HasIndex("PartnerTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Today.Model.Models.Coupon", b =>
                {
                    b.Property<int>("CouponId")
                        .HasColumnType("int")
                        .HasColumnName("CouponID");

                    b.Property<string>("ConditionsOfUse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CouponDiscount")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("CouponName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CouponStatus")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("CouponId");

                    b.ToTable("Coupon");
                });

            modelBuilder.Entity("Today.Model.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .HasColumnType("int")
                        .HasColumnName("LocationID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Latitude")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("latitude");

                    b.Property<string>("Longitude")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("longitude");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.HasKey("LocationId");

                    b.HasIndex("ProductId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Today.Model.Models.LoginWay", b =>
                {
                    b.Property<string>("LongWayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UniqueID");

                    b.HasIndex("MemberId");

                    b.ToTable("LoginWay");
                });

            modelBuilder.Entity("Today.Model.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<int?>("CouponId")
                        .HasColumnType("int")
                        .HasColumnName("CouponID");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityCard")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("MemberId");

                    b.HasIndex("CityId");

                    b.HasIndex("CouponId");

                    b.HasIndex("MessageId");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("Today.Model.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    b.Property<string>("MessageContext")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime");

                    b.HasKey("MessageId");

                    b.HasIndex("OrderId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Today.Model.Models.MinorCategory", b =>
                {
                    b.Property<int>("MinorCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("MinorCategoryID");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PrimaryCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("PrimaryCategoryID");

                    b.HasKey("MinorCategoryId");

                    b.HasIndex("PrimaryCategoryId");

                    b.ToTable("MinorCategory");
                });

            modelBuilder.Entity("Today.Model.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.HasKey("OrderId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Today.Model.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("OrderDetailsID");

                    b.Property<string>("DetailJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DetailJSON");

                    b.Property<DateTime>("LeaseTime")
                        .HasColumnType("date");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int>("TicketsId")
                        .HasColumnType("int")
                        .HasColumnName("TicketsID");

                    b.HasKey("OrderDetailsId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TicketsId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Today.Model.Models.PartnerType", b =>
                {
                    b.Property<int>("PartnerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PartnerTypeID");

                    b.Property<string>("PartnerType1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PartnerType");

                    b.HasKey("PartnerTypeId");

                    b.ToTable("PartnerType");
                });

            modelBuilder.Entity("Today.Model.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<string>("PaymentWay")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Today.Model.Models.PricingItem", b =>
                {
                    b.Property<int>("PricingItemId")
                        .HasColumnType("int")
                        .HasColumnName("PricingItemID");

                    b.Property<string>("Itemtext")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("OriginalUnitPrice")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int>("SpecificationId")
                        .HasColumnType("int")
                        .HasColumnName("SpecificationID");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("UnitText")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("PricingItemId");

                    b.HasIndex("SpecificationId");

                    b.ToTable("PricingItems");
                });

            modelBuilder.Entity("Today.Model.Models.PrimaryCategory", b =>
                {
                    b.Property<int>("PrimaryCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("PrimaryCategoryID");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PrimaryCategoryId");

                    b.ToTable("PrimaryCategory");
                });

            modelBuilder.Entity("Today.Model.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<string>("CancellationPolicy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("HowUse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Illustrate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShoppingNotice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockMax")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<string>("UnitsOnOrder")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UseInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("CityId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Today.Model.Models.ProductStatus", b =>
                {
                    b.Property<int>("ProductStatusId")
                        .HasColumnType("int")
                        .HasColumnName("ProductStatusID");

                    b.Property<int>("BookQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("date");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("RemainingStock")
                        .HasColumnType("int");

                    b.HasKey("ProductStatusId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductStatus");
                });

            modelBuilder.Entity("Today.Model.Models.Program", b =>
                {
                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProgramId");

                    b.HasIndex("ProductId");

                    b.ToTable("Program");
                });

            modelBuilder.Entity("Today.Model.Models.ProgramDatePicker", b =>
                {
                    b.Property<int>("ProgramDateId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramDateID");

                    b.Property<string>("DatimePickerConfigurationJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DatimePickerConfigurationJSON");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("ProgramDateId");

                    b.HasIndex("ProgramId");

                    b.ToTable("ProgramDatePicker");
                });

            modelBuilder.Entity("Today.Model.Models.ProgramInclude", b =>
                {
                    b.Property<bool>("IncludeTorF")
                        .HasColumnType("bit");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<int>("ProgramIncludeId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramIncludeID");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ProgramId");

                    b.ToTable("ProgramInclude");
                });

            modelBuilder.Entity("Today.Model.Models.ProgramSpecification", b =>
                {
                    b.Property<int>("SpecificationId")
                        .HasColumnType("int")
                        .HasColumnName("SpecificationID");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("SpecificationJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("SpecificationJSON");

                    b.HasKey("SpecificationId");

                    b.HasIndex("ProgramId");

                    b.ToTable("ProgramSpecification");
                });

            modelBuilder.Entity("Today.Model.Models.Reply", b =>
                {
                    b.Property<int>("ReplyId")
                        .HasColumnType("int")
                        .HasColumnName("ReplyID");

                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    b.Property<string>("ReplayText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime");

                    b.HasKey("ReplyId");

                    b.HasIndex("MessageId");

                    b.ToTable("Reply");
                });

            modelBuilder.Entity("Today.Model.Models.ShoppinCart", b =>
                {
                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("date");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<int>("SpecificationId")
                        .HasColumnType("int")
                        .HasColumnName("SpecificationID");

                    b.HasIndex("MemberId");

                    b.HasIndex("SpecificationId");

                    b.ToTable("ShoppinCart");
                });

            modelBuilder.Entity("Today.Model.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SubscriptionId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("Today.Model.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("SupplierId");

                    b.HasIndex("CityId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Today.Model.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("TagText")
                        .HasColumnType("int");

                    b.HasKey("TagId");

                    b.HasIndex("ProductId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Today.Model.Models.Ticket", b =>
                {
                    b.Property<int>("TicketsId")
                        .HasColumnType("int")
                        .HasColumnName("TicketsID");

                    b.Property<byte[]>("TicketsQrcode")
                        .IsRequired()
                        .HasColumnType("image")
                        .HasColumnName("TicketsQRcode");

                    b.HasKey("TicketsId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Today.Model.Models.AboutProgram", b =>
                {
                    b.HasOne("Today.Model.Models.AboutProgramOption", "AboutProgramOptions")
                        .WithMany()
                        .HasForeignKey("AboutProgramOptionsId")
                        .HasConstraintName("FK_AboutProgram_AboutProgramOptions")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Program", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .HasConstraintName("FK_AboutProgram_Program")
                        .IsRequired();

                    b.Navigation("AboutProgramOptions");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Today.Model.Models.Category", b =>
                {
                    b.HasOne("Today.Model.Models.MinorCategory", "MinorCategory")
                        .WithMany()
                        .HasForeignKey("MinorCategoryId")
                        .HasConstraintName("FK_Category_MinorCategory")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Category_Product")
                        .IsRequired();

                    b.Navigation("MinorCategory");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Today.Model.Models.CityRaider", b =>
                {
                    b.HasOne("Today.Model.Models.City", "City")
                        .WithMany("CityRaiders")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_CityRaiders_City")
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Today.Model.Models.Collect", b =>
                {
                    b.HasOne("Today.Model.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Collect_Member")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Collect_Product")
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Today.Model.Models.Comment", b =>
                {
                    b.HasOne("Today.Model.Models.Member", "Member")
                        .WithMany("Comments")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Comment_Member")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.OrderDetail", "OrderDetails")
                        .WithMany("Comments")
                        .HasForeignKey("OrderDetailsId")
                        .HasConstraintName("FK_Comment_OrderDetails")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.PartnerType", "PartnerType")
                        .WithMany("Comments")
                        .HasForeignKey("PartnerTypeId")
                        .HasConstraintName("FK_Comment_PartnerType")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Comment_Product")
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("OrderDetails");

                    b.Navigation("PartnerType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Today.Model.Models.Location", b =>
                {
                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany("Locations")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Location_Product")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Today.Model.Models.LoginWay", b =>
                {
                    b.HasOne("Today.Model.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_LoginWay_Member")
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Today.Model.Models.Member", b =>
                {
                    b.HasOne("Today.Model.Models.City", "City")
                        .WithMany("Members")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Member_City")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Coupon", "Coupon")
                        .WithMany("Members")
                        .HasForeignKey("CouponId")
                        .HasConstraintName("FK_Member_Coupon");

                    b.HasOne("Today.Model.Models.Message", "Message")
                        .WithMany("Members")
                        .HasForeignKey("MessageId")
                        .HasConstraintName("FK_Member_Message");

                    b.Navigation("City");

                    b.Navigation("Coupon");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Today.Model.Models.Message", b =>
                {
                    b.HasOne("Today.Model.Models.Order", "Order")
                        .WithMany("Messages")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Message_Order")
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Today.Model.Models.MinorCategory", b =>
                {
                    b.HasOne("Today.Model.Models.PrimaryCategory", "PrimaryCategory")
                        .WithMany("MinorCategories")
                        .HasForeignKey("PrimaryCategoryId")
                        .HasConstraintName("FK_MinorCategory_PrimaryCategory")
                        .IsRequired();

                    b.Navigation("PrimaryCategory");
                });

            modelBuilder.Entity("Today.Model.Models.Order", b =>
                {
                    b.HasOne("Today.Model.Models.Member", "Member")
                        .WithMany("Orders")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Order_Member")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK_Order_Payment")
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Today.Model.Models.OrderDetail", b =>
                {
                    b.HasOne("Today.Model.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderDetails_Order")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_OrderDetails_Product")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Ticket", "Tickets")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TicketsId")
                        .HasConstraintName("FK_OrderDetails_Tickets")
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Today.Model.Models.PricingItem", b =>
                {
                    b.HasOne("Today.Model.Models.ProgramSpecification", "Specification")
                        .WithMany("PricingItems")
                        .HasForeignKey("SpecificationId")
                        .HasConstraintName("FK_PricingItems_ProgramSpecification")
                        .IsRequired();

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("Today.Model.Models.Product", b =>
                {
                    b.HasOne("Today.Model.Models.City", "City")
                        .WithMany("Products")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Product_City")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_Product_Supplier")
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Today.Model.Models.ProductStatus", b =>
                {
                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany("ProductStatuses")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductStatus_Product")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Today.Model.Models.Program", b =>
                {
                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany("Programs")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Program_Product")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Today.Model.Models.ProgramDatePicker", b =>
                {
                    b.HasOne("Today.Model.Models.Program", "Program")
                        .WithMany("ProgramDatePickers")
                        .HasForeignKey("ProgramId")
                        .HasConstraintName("FK_ProgramDatePicker_Program")
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Today.Model.Models.ProgramInclude", b =>
                {
                    b.HasOne("Today.Model.Models.Program", "Program")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .HasConstraintName("FK_ProgramInclude_Program")
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Today.Model.Models.ProgramSpecification", b =>
                {
                    b.HasOne("Today.Model.Models.Program", "Program")
                        .WithMany("ProgramSpecifications")
                        .HasForeignKey("ProgramId")
                        .HasConstraintName("FK_ProgramSpecification_Program")
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Today.Model.Models.Reply", b =>
                {
                    b.HasOne("Today.Model.Models.Message", "Message")
                        .WithMany("Replies")
                        .HasForeignKey("MessageId")
                        .HasConstraintName("FK_Reply_Message")
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Today.Model.Models.ShoppinCart", b =>
                {
                    b.HasOne("Today.Model.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_ShoppinCart_Member")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.ProgramSpecification", "Specification")
                        .WithMany()
                        .HasForeignKey("SpecificationId")
                        .HasConstraintName("FK_ShoppinCart_ProgramSpecification")
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("Today.Model.Models.Supplier", b =>
                {
                    b.HasOne("Today.Model.Models.City", "City")
                        .WithMany("Suppliers")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Supplier_City")
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Today.Model.Models.Tag", b =>
                {
                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany("Tags")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Tag_Product")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Today.Model.Models.City", b =>
                {
                    b.Navigation("CityRaiders");

                    b.Navigation("Members");

                    b.Navigation("Products");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("Today.Model.Models.Coupon", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Today.Model.Models.Member", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Today.Model.Models.Message", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Today.Model.Models.Order", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Today.Model.Models.OrderDetail", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Today.Model.Models.PartnerType", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Today.Model.Models.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Today.Model.Models.PrimaryCategory", b =>
                {
                    b.Navigation("MinorCategories");
                });

            modelBuilder.Entity("Today.Model.Models.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Locations");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductStatuses");

                    b.Navigation("Programs");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Today.Model.Models.Program", b =>
                {
                    b.Navigation("ProgramDatePickers");

                    b.Navigation("ProgramSpecifications");
                });

            modelBuilder.Entity("Today.Model.Models.ProgramSpecification", b =>
                {
                    b.Navigation("PricingItems");
                });

            modelBuilder.Entity("Today.Model.Models.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Today.Model.Models.Ticket", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
