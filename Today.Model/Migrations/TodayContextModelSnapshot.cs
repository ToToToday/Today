// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Today.Model.Models;

namespace Today.Model.Migrations
{
    [DbContext(typeof(TodayContext))]
    partial class TodayContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Today.Model.Models.Ad", b =>
                {
                    b.Property<int>("AdId")
                        .HasColumnType("int")
                        .HasColumnName("AdID");

                    b.Property<string>("AdName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Peroid")
                        .HasColumnType("date");

                    b.HasKey("AdId");

                    b.ToTable("Ad");
                });

            modelBuilder.Entity("Today.Model.Models.CarModel", b =>
                {
                    b.Property<int>("CarModelId")
                        .HasColumnType("int")
                        .HasColumnName("CarModelID");

                    b.Property<string>("CarModel1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CarModel");

                    b.HasKey("CarModelId");

                    b.ToTable("CarModel");
                });

            modelBuilder.Entity("Today.Model.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("CityImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityIntrod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Island")
                        .HasColumnType("bit");

                    b.HasKey("CityId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Today.Model.Models.CityRaider", b =>
                {
                    b.Property<int>("RaidersId")
                        .HasColumnType("int")
                        .HasColumnName("RaidersID");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CItyID");

                    b.Property<string>("Subtitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Video")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RaidersId");

                    b.HasIndex("CityId");

                    b.ToTable("CityRaiders");
                });

            modelBuilder.Entity("Today.Model.Models.Collect", b =>
                {
                    b.Property<int>("CollectId")
                        .HasColumnType("int")
                        .HasColumnName("CollectID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.HasKey("CollectId");

                    b.HasIndex("ProductId");

                    b.ToTable("Collect");
                });

            modelBuilder.Entity("Today.Model.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasColumnName("CommentID");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("date");

                    b.Property<string>("CommentTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("ParnerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ParnerTypeID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("RatingStar")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("MemberId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ParnerTypeId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Today.Model.Models.Coupon", b =>
                {
                    b.Property<int>("CouponId")
                        .HasColumnType("int")
                        .HasColumnName("CouponID");

                    b.Property<string>("CouponName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CouponId");

                    b.ToTable("Coupon");
                });

            modelBuilder.Entity("Today.Model.Models.CouponDetail", b =>
                {
                    b.Property<int>("CouponDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("CouponDetailsID");

                    b.Property<int>("CouponDiscount")
                        .HasColumnType("int");

                    b.Property<int>("CouponId")
                        .HasColumnType("int")
                        .HasColumnName("CouponID");

                    b.HasKey("CouponDetailsId");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponDetails");
                });

            modelBuilder.Entity("Today.Model.Models.EventLocation", b =>
                {
                    b.Property<int>("EventLocationId")
                        .HasColumnType("int")
                        .HasColumnName("EventLocationID");

                    b.Property<int>("LocationDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("LocationDetailsID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.HasKey("EventLocationId");

                    b.HasIndex("LocationDetailsId");

                    b.HasIndex("ProductId");

                    b.ToTable("EventLocation");
                });

            modelBuilder.Entity("Today.Model.Models.HowUse", b =>
                {
                    b.Property<int>("HowUseId")
                        .HasColumnType("int")
                        .HasColumnName("HowUseID");

                    b.Property<int>("HowUseDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("HowUseDetailsID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.HasKey("HowUseId");

                    b.HasIndex("HowUseDetailsId");

                    b.HasIndex("ProductId");

                    b.ToTable("HowUse");
                });

            modelBuilder.Entity("Today.Model.Models.HowUseDetail", b =>
                {
                    b.Property<int>("HowUseDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("HowUseDetailsID");

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Usage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HowUseDetailsId");

                    b.ToTable("HowUseDetails");
                });

            modelBuilder.Entity("Today.Model.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    b.Property<string>("InvoiceWay")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("InvoiceId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("Today.Model.Models.LocationDetail", b =>
                {
                    b.Property<int>("LocationDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("LocationDetailsID");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LocationDetailsId")
                        .HasName("PK_EventLocation");

                    b.ToTable("LocationDetails");
                });

            modelBuilder.Entity("Today.Model.Models.LoginWay", b =>
                {
                    b.Property<int>("LoginWayId")
                        .HasColumnType("int")
                        .HasColumnName("LoginWayID");

                    b.Property<int>("LoginWayName")
                        .HasColumnType("int");

                    b.HasKey("LoginWayId");

                    b.ToTable("LoginWay");
                });

            modelBuilder.Entity("Today.Model.Models.Member", b =>
                {
                    b.Property<int>("CollectId")
                        .HasColumnType("int")
                        .HasColumnName("CollectID");

                    b.Property<int>("CouponId")
                        .HasColumnType("int")
                        .HasColumnName("CouponID");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    b.HasIndex("CollectId");

                    b.HasIndex("CouponId");

                    b.HasIndex("MemberId");

                    b.HasIndex("MessageId");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("Today.Model.Models.MemberInfoId", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<DateTime>("Brithday")
                        .HasColumnType("date");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LoginWayId")
                        .HasColumnType("int")
                        .HasColumnName("LoginWayID");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Pchone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.HasKey("MemberId");

                    b.HasIndex("CityId");

                    b.HasIndex("LoginWayId");

                    b.ToTable("MemberInfoID");
                });

            modelBuilder.Entity("Today.Model.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .HasColumnType("int")
                        .HasColumnName("MessageID");

                    b.Property<int?>("StoreMessageId")
                        .HasColumnType("int")
                        .HasColumnName("StoreMessageID");

                    b.Property<int?>("TodayMessageId")
                        .HasColumnType("int")
                        .HasColumnName("TodayMessageID");

                    b.HasKey("MessageId");

                    b.HasIndex("StoreMessageId");

                    b.HasIndex("TodayMessageId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Today.Model.Models.MinorCategory", b =>
                {
                    b.Property<int>("MinorCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("MinorCategoryID");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.Property<int>("PrimaryCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("PrimaryCategoryID");

                    b.HasKey("MinorCategoryId");

                    b.HasIndex("PrimaryCategoryId");

                    b.ToTable("MinorCategory");
                });

            modelBuilder.Entity("Today.Model.Models.Offer", b =>
                {
                    b.Property<int>("OffersId")
                        .HasColumnType("int")
                        .HasColumnName("OffersID");

                    b.Property<int?>("AdId")
                        .HasColumnType("int")
                        .HasColumnName("AdID");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PromotionWayId")
                        .HasColumnType("int")
                        .HasColumnName("PromotionWayID");

                    b.HasKey("OffersId");

                    b.HasIndex("AdId");

                    b.HasIndex("PromotionWayId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Today.Model.Models.OffersDetail", b =>
                {
                    b.Property<int>("OffersDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("OffersDetailsID");

                    b.Property<int?>("DiscountAngin")
                        .HasColumnType("int");

                    b.Property<int>("OffersId")
                        .HasColumnType("int")
                        .HasColumnName("OffersID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.HasKey("OffersDetailsId");

                    b.HasIndex("OffersId");

                    b.HasIndex("ProductId");

                    b.ToTable("OffersDetails");
                });

            modelBuilder.Entity("Today.Model.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<DateTime?>("DepartureDate")
                        .HasColumnType("date");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    b.Property<DateTime?>("LeaseTime")
                        .HasColumnType("date");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<decimal?>("SumPrice")
                        .HasColumnType("money");

                    b.Property<int?>("Total")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Today.Model.Models.OrderDetai", b =>
                {
                    b.Property<int>("OrderDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("OrderDetailsID");

                    b.Property<int?>("CarModelId")
                        .HasColumnType("int")
                        .HasColumnName("CarModelID");

                    b.Property<int?>("Discount")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("Seats")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ShowTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("TicketsId")
                        .HasColumnType("int")
                        .HasColumnName("TicketsID");

                    b.Property<int?>("VehiclesNumber")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailsId");

                    b.HasIndex("CarModelId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TicketsId");

                    b.ToTable("OrderDetais");
                });

            modelBuilder.Entity("Today.Model.Models.PamerType", b =>
                {
                    b.Property<int>("PamerTypeId")
                        .HasColumnType("int")
                        .HasColumnName("PamerTypeID");

                    b.Property<string>("PamerType1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("PamerType");

                    b.HasKey("PamerTypeId");

                    b.ToTable("PamerType");
                });

            modelBuilder.Entity("Today.Model.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    b.Property<string>("PaymentWay")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Today.Model.Models.PrimaryCategory", b =>
                {
                    b.Property<int>("PrimaryCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("PrimaryCategoryID");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PrimaryCategoryId");

                    b.ToTable("PrimaryCategory");
                });

            modelBuilder.Entity("Today.Model.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<string>("CancellationPolicy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("Illustrate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinorCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("MinorCategoryID");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShoppingNotice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<string>("UseInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("CityId");

                    b.HasIndex("MinorCategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Today.Model.Models.PromotionWay", b =>
                {
                    b.Property<int>("PromotionWayId")
                        .HasColumnType("int")
                        .HasColumnName("PromotionWayID");

                    b.Property<string>("PromotionWayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PromotionWayId");

                    b.ToTable("PromotionWay");
                });

            modelBuilder.Entity("Today.Model.Models.ShppingCart", b =>
                {
                    b.Property<DateTime?>("DepartureDate")
                        .HasColumnType("date");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("TicketID");

                    b.HasIndex("MemberId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TicketId");

                    b.ToTable("ShppingCart");
                });

            modelBuilder.Entity("Today.Model.Models.StoreMessage", b =>
                {
                    b.Property<int>("StoreMessageId")
                        .HasColumnType("int")
                        .HasColumnName("StoreMessageID");

                    b.Property<string>("MessageContext")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreMessageId");

                    b.ToTable("StoreMessage");
                });

            modelBuilder.Entity("Today.Model.Models.Subscription", b =>
                {
                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("E-mail");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int")
                        .HasColumnName("SubscriptionID");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("Today.Model.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("SupplierID");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("CityID");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true);

                    b.HasKey("SupplierId");

                    b.HasIndex("CityId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Today.Model.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnName("TagID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("TagDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("TagDetailsID");

                    b.HasKey("TagId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TagDetailsId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Today.Model.Models.TagDetail", b =>
                {
                    b.Property<int>("TagDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("TagDetailsID");

                    b.Property<string>("TagInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagDetailsId")
                        .HasName("PK_Rule");

                    b.ToTable("TagDetails");
                });

            modelBuilder.Entity("Today.Model.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("TicketID");

                    b.Property<string>("TicketsName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TicketId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Today.Model.Models.TodayMessage", b =>
                {
                    b.Property<int>("TodayMessageId")
                        .HasColumnType("int")
                        .HasColumnName("TodayMessageID");

                    b.Property<string>("MessageContext")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TodayMessageId");

                    b.ToTable("TodayMessage");
                });

            modelBuilder.Entity("Today.Model.Models.CityRaider", b =>
                {
                    b.HasOne("Today.Model.Models.City", "City")
                        .WithMany("CityRaiders")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_CityRaiders_City")
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Today.Model.Models.Collect", b =>
                {
                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany("Collects")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Collect_Product")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Today.Model.Models.Comment", b =>
                {
                    b.HasOne("Today.Model.Models.MemberInfoId", "Member")
                        .WithMany("Comments")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Comment_MemberInfoID")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Order", "Order")
                        .WithMany("Comments")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Comment_Order")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.PamerType", "ParnerType")
                        .WithMany("Comments")
                        .HasForeignKey("ParnerTypeId")
                        .HasConstraintName("FK_Comment_PamerType")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Comment_Product")
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Order");

                    b.Navigation("ParnerType");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Today.Model.Models.CouponDetail", b =>
                {
                    b.HasOne("Today.Model.Models.Coupon", "Coupon")
                        .WithMany("CouponDetails")
                        .HasForeignKey("CouponId")
                        .HasConstraintName("FK_CouponDetails_Coupon")
                        .IsRequired();

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("Today.Model.Models.EventLocation", b =>
                {
                    b.HasOne("Today.Model.Models.LocationDetail", "LocationDetails")
                        .WithMany("EventLocations")
                        .HasForeignKey("LocationDetailsId")
                        .HasConstraintName("FK_EventLocation_LocationDetails")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany("EventLocations")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_EventLocation_Product")
                        .IsRequired();

                    b.Navigation("LocationDetails");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Today.Model.Models.HowUse", b =>
                {
                    b.HasOne("Today.Model.Models.HowUseDetail", "HowUseDetails")
                        .WithMany("HowUses")
                        .HasForeignKey("HowUseDetailsId")
                        .HasConstraintName("FK_HowUse_HowUseDetails")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany("HowUses")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_HowUse_Product")
                        .IsRequired();

                    b.Navigation("HowUseDetails");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Today.Model.Models.Member", b =>
                {
                    b.HasOne("Today.Model.Models.Collect", "Collect")
                        .WithMany()
                        .HasForeignKey("CollectId")
                        .HasConstraintName("FK_Member_Collect")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId")
                        .HasConstraintName("FK_Member_Coupon")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.MemberInfoId", "MemberNavigation")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Member_MemberInfoID")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .HasConstraintName("FK_Member_Message")
                        .IsRequired();

                    b.Navigation("Collect");

                    b.Navigation("Coupon");

                    b.Navigation("MemberNavigation");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Today.Model.Models.MemberInfoId", b =>
                {
                    b.HasOne("Today.Model.Models.City", "City")
                        .WithMany("MemberInfoIds")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_MemberInfoID_City");

                    b.HasOne("Today.Model.Models.LoginWay", "LoginWay")
                        .WithMany("MemberInfoIds")
                        .HasForeignKey("LoginWayId")
                        .HasConstraintName("FK_MemberInfoID_LoginWay")
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("LoginWay");
                });

            modelBuilder.Entity("Today.Model.Models.Message", b =>
                {
                    b.HasOne("Today.Model.Models.StoreMessage", "StoreMessage")
                        .WithMany("Messages")
                        .HasForeignKey("StoreMessageId")
                        .HasConstraintName("FK_Message_StoreMessage");

                    b.HasOne("Today.Model.Models.TodayMessage", "TodayMessage")
                        .WithMany("Messages")
                        .HasForeignKey("TodayMessageId")
                        .HasConstraintName("FK_Message_TodayMessage");

                    b.Navigation("StoreMessage");

                    b.Navigation("TodayMessage");
                });

            modelBuilder.Entity("Today.Model.Models.MinorCategory", b =>
                {
                    b.HasOne("Today.Model.Models.PrimaryCategory", "PrimaryCategory")
                        .WithMany("MinorCategories")
                        .HasForeignKey("PrimaryCategoryId")
                        .HasConstraintName("FK_MinorCategory_PrimaryCategory")
                        .IsRequired();

                    b.Navigation("PrimaryCategory");
                });

            modelBuilder.Entity("Today.Model.Models.Offer", b =>
                {
                    b.HasOne("Today.Model.Models.Ad", "Ad")
                        .WithMany("Offers")
                        .HasForeignKey("AdId")
                        .HasConstraintName("FK_Offers_Ad");

                    b.HasOne("Today.Model.Models.PromotionWay", "PromotionWay")
                        .WithMany("Offers")
                        .HasForeignKey("PromotionWayId")
                        .HasConstraintName("FK_Offers_PromotionWay");

                    b.Navigation("Ad");

                    b.Navigation("PromotionWay");
                });

            modelBuilder.Entity("Today.Model.Models.OffersDetail", b =>
                {
                    b.HasOne("Today.Model.Models.Offer", "Offers")
                        .WithMany("OffersDetails")
                        .HasForeignKey("OffersId")
                        .HasConstraintName("FK_OffersDetails_Offers")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany("OffersDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_OffersDetails_Product")
                        .IsRequired();

                    b.Navigation("Offers");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Today.Model.Models.Order", b =>
                {
                    b.HasOne("Today.Model.Models.Invoice", "Invoice")
                        .WithMany("Orders")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_Order_Invoice");

                    b.HasOne("Today.Model.Models.MemberInfoId", "Member")
                        .WithMany("Orders")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Order_MemberInfoID")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK_Order_Payment");

                    b.Navigation("Invoice");

                    b.Navigation("Member");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Today.Model.Models.OrderDetai", b =>
                {
                    b.HasOne("Today.Model.Models.CarModel", "CarModel")
                        .WithMany("OrderDetais")
                        .HasForeignKey("CarModelId")
                        .HasConstraintName("FK_OrderDetais_CarModel");

                    b.HasOne("Today.Model.Models.Order", "Order")
                        .WithMany("OrderDetais")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderDetais_Order")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany("OrderDetais")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_OrderDetais_Product")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Ticket", "Tickets")
                        .WithMany("OrderDetais")
                        .HasForeignKey("TicketsId")
                        .HasConstraintName("FK_OrderDetais_Tickets");

                    b.Navigation("CarModel");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Today.Model.Models.Product", b =>
                {
                    b.HasOne("Today.Model.Models.City", "City")
                        .WithMany("Products")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Product_City")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.MinorCategory", "MinorCategory")
                        .WithMany("Products")
                        .HasForeignKey("MinorCategoryId")
                        .HasConstraintName("FK_Product_MinorCategory")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_Product_Supplier")
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("MinorCategory");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Today.Model.Models.ShppingCart", b =>
                {
                    b.HasOne("Today.Model.Models.MemberInfoId", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_ShppingCart_MemberInfoID")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ShppingCart_Product")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK_ShppingCart_Tickets");

                    b.Navigation("Member");

                    b.Navigation("Product");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Today.Model.Models.Supplier", b =>
                {
                    b.HasOne("Today.Model.Models.City", "City")
                        .WithMany("Suppliers")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Supplier_City")
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Today.Model.Models.Tag", b =>
                {
                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany("Tags")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Tag_Product")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.TagDetail", "TagDetails")
                        .WithMany("Tags")
                        .HasForeignKey("TagDetailsId")
                        .HasConstraintName("FK_Tag_TagDetails")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("TagDetails");
                });

            modelBuilder.Entity("Today.Model.Models.Ad", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Today.Model.Models.CarModel", b =>
                {
                    b.Navigation("OrderDetais");
                });

            modelBuilder.Entity("Today.Model.Models.City", b =>
                {
                    b.Navigation("CityRaiders");

                    b.Navigation("MemberInfoIds");

                    b.Navigation("Products");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("Today.Model.Models.Coupon", b =>
                {
                    b.Navigation("CouponDetails");
                });

            modelBuilder.Entity("Today.Model.Models.HowUseDetail", b =>
                {
                    b.Navigation("HowUses");
                });

            modelBuilder.Entity("Today.Model.Models.Invoice", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Today.Model.Models.LocationDetail", b =>
                {
                    b.Navigation("EventLocations");
                });

            modelBuilder.Entity("Today.Model.Models.LoginWay", b =>
                {
                    b.Navigation("MemberInfoIds");
                });

            modelBuilder.Entity("Today.Model.Models.MemberInfoId", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Today.Model.Models.MinorCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Today.Model.Models.Offer", b =>
                {
                    b.Navigation("OffersDetails");
                });

            modelBuilder.Entity("Today.Model.Models.Order", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("OrderDetais");
                });

            modelBuilder.Entity("Today.Model.Models.PamerType", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Today.Model.Models.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Today.Model.Models.PrimaryCategory", b =>
                {
                    b.Navigation("MinorCategories");
                });

            modelBuilder.Entity("Today.Model.Models.Product", b =>
                {
                    b.Navigation("Collects");

                    b.Navigation("Comments");

                    b.Navigation("EventLocations");

                    b.Navigation("HowUses");

                    b.Navigation("OffersDetails");

                    b.Navigation("OrderDetais");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Today.Model.Models.PromotionWay", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("Today.Model.Models.StoreMessage", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Today.Model.Models.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Today.Model.Models.TagDetail", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Today.Model.Models.Ticket", b =>
                {
                    b.Navigation("OrderDetais");
                });

            modelBuilder.Entity("Today.Model.Models.TodayMessage", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
