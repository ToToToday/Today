// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Today.Model.Models;

namespace Today.Model.Migrations
{
    [DbContext(typeof(TodayDBContext))]
    partial class TodayDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Today.Model.Models.AboutProgram", b =>
                {
                    b.Property<int>("AboutProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AboutProgramOptionsId")
                        .HasColumnType("int");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int");

                    b.HasKey("AboutProgramId");

                    b.HasIndex("AboutProgramOptionsId");

                    b.HasIndex("ProgramId");

                    b.ToTable("AboutProgram");
                });

            modelBuilder.Entity("Today.Model.Models.AboutProgramOption", b =>
                {
                    b.Property<int>("AboutProgramOptionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("{n}天內確認");

                    b.Property<string>("IconClass")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("icon圖標");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("AboutProgramOptionsId");

                    b.HasIndex("ProductId");

                    b.ToTable("AboutProgramOptions");
                });

            modelBuilder.Entity("Today.Model.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("類別名稱");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int")
                        .HasComment("父類別");

                    b.HasKey("CategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Today.Model.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityIntrod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("城市說明");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("城市名稱");

                    b.Property<bool>("IsIsland")
                        .HasColumnType("bit")
                        .HasComment("是否為本島");

                    b.HasKey("CityId");

                    b.ToTable("City");

                    b
                        .HasComment("");
                });

            modelBuilder.Entity("Today.Model.Models.CityRaider", b =>
                {
                    b.Property<int>("RaidersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<bool>("Isdeleted")
                        .HasColumnType("bit")
                        .HasComment("軟刪除");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime")
                        .HasComment("發文時間");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("文章狀態");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("副標題");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("攻略內文");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("主標題");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasComment("更新時間(第一次發文存發文時間)");

                    b.Property<string>("Video")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("banner影片");

                    b.HasKey("RaidersId");

                    b.HasIndex("CityId");

                    b.HasIndex("StaffId");

                    b.ToTable("CityRaiders");
                });

            modelBuilder.Entity("Today.Model.Models.Collect", b =>
                {
                    b.Property<int>("CollectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("收藏id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("加入時間");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CollectId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ProductId");

                    b.ToTable("Collect");
                });

            modelBuilder.Entity("Today.Model.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("評論")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime")
                        .HasComment("評論時間");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("評論內文");

                    b.Property<string>("CommentTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("評論標題");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasComment("會員id");

                    b.Property<int>("OrderDetailsId")
                        .HasColumnType("int")
                        .HasColumnName("OrderDetailsID")
                        .HasComment("詳細訂單ID");

                    b.Property<int>("PartnerType")
                        .HasColumnType("int")
                        .HasComment("旅伴類型ID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("商品id");

                    b.Property<int>("RatingStar")
                        .HasColumnType("int")
                        .HasComment("幾星評價");

                    b.HasKey("CommentId");

                    b.HasIndex("MemberId");

                    b.HasIndex("OrderDetailsId");

                    b.HasIndex("ProductId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Today.Model.Models.Coupon", b =>
                {
                    b.Property<int>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Context")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("優惠卷簡易說明");

                    b.Property<decimal>("CouponDiscount")
                        .HasColumnType("decimal(18,0)")
                        .HasComment("折扣金額");

                    b.Property<string>("CouponName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("優惠卷名稱");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("優惠碼");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime")
                        .HasComment("結束日期");

                    b.Property<int?>("FullConsumption")
                        .HasColumnType("int")
                        .HasComment("滿額 多少 (使用條件)");

                    b.Property<int?>("Rebate")
                        .HasColumnType("int")
                        .HasComment("減價 多少 (使用條件)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime")
                        .HasComment("開始日期");

                    b.Property<string>("UseInfo")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("使用條件");

                    b.HasKey("CouponId");

                    b.ToTable("Coupon");
                });

            modelBuilder.Entity("Today.Model.Models.CouponManage", b =>
                {
                    b.Property<int>("CouponManageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("優惠卷管理")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CouponId")
                        .HasColumnType("int")
                        .HasComment("優惠眷id");

                    b.Property<int>("CouponStatus")
                        .HasColumnType("int")
                        .HasComment("狀態");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("datetime")
                        .HasComment("發卷時間");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasComment("員工發眷人");

                    b.HasKey("CouponManageId");

                    b.HasIndex("CouponId");

                    b.HasIndex("MemberId");

                    b.HasIndex("StaffId");

                    b.ToTable("CouponManage");
                });

            modelBuilder.Entity("Today.Model.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("體驗地點ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("地點");

                    b.Property<string>("Latitude")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("緯度");

                    b.Property<string>("Longitude")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("經度");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("商品ID");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text")
                        .HasComment("內文");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("體驗地點標題");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasComment("類型0＝體驗 ,1,2...\r\n(地點種類)");

                    b.HasKey("LocationId");

                    b.HasIndex("ProductId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Today.Model.Models.LoginWay", b =>
                {
                    b.Property<int>("LoginWayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("登入方式ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LongWayName")
                        .HasColumnType("int")
                        .HasComment("登入方式(email1, fb2, google3)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID")
                        .HasComment("會員ID");

                    b.Property<string>("UniqueId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UniqueID")
                        .HasComment("唯一ID (如果是EMAIL存EMAIL 若為三方登入給一個ID");

                    b.HasKey("LoginWayId");

                    b.HasIndex("MemberId");

                    b.ToTable("LoginWay");
                });

            modelBuilder.Entity("Today.Model.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("會員ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasComment("年齡");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasComment("城市ID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("電子信箱");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit")
                        .HasComment("性別");

                    b.Property<string>("IdentityCard")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("身分證字號");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("會員圖片");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("會員名稱");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("密碼");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("電話");

                    b.HasKey("MemberId");

                    b.HasIndex("CityId");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("Today.Model.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("MessageContext")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("訊息內容");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasComment("因為有訂單才能傳訊息");

                    b.Property<int>("Recipient")
                        .HasColumnType("int")
                        .HasComment("接受者(平台1 商家2 使用者3)");

                    b.Property<int?>("ReplyId")
                        .HasColumnType("int")
                        .HasComment("回覆");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime")
                        .HasComment("傳送時間");

                    b.HasKey("MessageId");

                    b.HasIndex("MemberId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReplyId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Today.Model.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("訂單ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("備註");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime")
                        .HasComment("下單日期");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasComment("付款ID");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("狀態");

                    b.Property<int>("StatusUpdate")
                        .HasColumnType("int")
                        .HasComment("訂單狀態更新");

                    b.HasKey("OrderId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Today.Model.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("訂單詳細ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime")
                        .HasComment("出發日期");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,0)")
                        .HasComment("折扣");

                    b.Property<string>("Itemtext")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("票種（成人/兒童/車)");

                    b.Property<DateTime>("LeaseTime")
                        .HasColumnType("datetime")
                        .HasComment("租賃時間");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasComment("訂單ID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("數量");

                    b.Property<int>("SpecificationId")
                        .HasColumnType("int")
                        .HasComment("規格ID");

                    b.Property<int>("TicketsId")
                        .HasColumnType("int")
                        .HasComment("電子憑證ID");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,0)")
                        .HasComment("價格");

                    b.HasKey("OrderDetailsId")
                        .HasName("PK_OrderDetails");

                    b.HasIndex("OrderId");

                    b.HasIndex("SpecificationId");

                    b.HasIndex("TicketsId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("Today.Model.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PaymentWay")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("付款方式");

                    b.HasKey("PaymentId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Today.Model.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CancellationPolicy")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("取消政策");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("HowUse")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("如何使用");

                    b.Property<string>("Illustrate")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商品說明");

                    b.Property<bool>("Isdeleted")
                        .HasColumnType("bit")
                        .HasComment("軟刪除");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("商品名稱");

                    b.Property<string>("ShoppingNotice")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("購物須知");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CityId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Today.Model.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("商品類別")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("Today.Model.Models.ProductPhoto", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("路徑");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("照片排序");

                    b.HasKey("PhotoId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPhoto");
                });

            modelBuilder.Entity("Today.Model.Models.ProductTag", b =>
                {
                    b.Property<int>("ProductTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("商品標籤")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("商品id");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ProductTagId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTag");
                });

            modelBuilder.Entity("Today.Model.Models.Program", b =>
                {
                    b.Property<int>("ProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Context")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("方案內文");

                    b.Property<bool>("Isdeleted")
                        .HasColumnType("bit")
                        .HasComment("軟刪除(上下架)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("方案標題");

                    b.HasKey("ProgramId");

                    b.HasIndex("ProductId");

                    b.ToTable("Program");
                });

            modelBuilder.Entity("Today.Model.Models.ProgramCantUseDate", b =>
                {
                    b.Property<int>("ProgramDateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasComment("要關閉的日期");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.HasKey("ProgramDateId")
                        .HasName("PK_ProgramDatePicker");

                    b.HasIndex("ProgramId");

                    b.ToTable("ProgramCantUseDate");
                });

            modelBuilder.Entity("Today.Model.Models.ProgramInclude", b =>
                {
                    b.Property<int>("ProgramIncludeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsInclude")
                        .HasColumnType("bit")
                        .HasComment("是否包含(判斷放在哪邊)");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasColumnName("ProgramID");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("內文");

                    b.HasKey("ProgramIncludeId");

                    b.HasIndex("ProgramId");

                    b.ToTable("ProgramInclude");
                });

            modelBuilder.Entity("Today.Model.Models.ProgramSpecification", b =>
                {
                    b.Property<int>("SpecificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Inventory")
                        .HasColumnType("int")
                        .HasComment("庫存量");

                    b.Property<bool>("IsScreening")
                        .HasColumnType("bit")
                        .HasComment("有無場次");

                    b.Property<string>("Itemtext")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("票種（成人/兒童/車)");

                    b.Property<decimal>("OriginalUnitPrice")
                        .HasColumnType("decimal(18,0)")
                        .HasComment("原價");

                    b.Property<int>("ProgramId")
                        .HasColumnType("int")
                        .HasComment("方案ID");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("狀態(上下架)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,0)")
                        .HasComment("單價");

                    b.Property<string>("UnitText")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("單位文字(人/間/輛）");

                    b.HasKey("SpecificationId");

                    b.HasIndex("ProgramId");

                    b.ToTable("ProgramSpecification");
                });

            modelBuilder.Entity("Today.Model.Models.Screening", b =>
                {
                    b.Property<int>("ScreeningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("場次ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SpecificationId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("狀態(上下架)");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time")
                        .HasComment("時間");

                    b.HasKey("ScreeningId");

                    b.HasIndex("SpecificationId");

                    b.ToTable("Screening");
                });

            modelBuilder.Entity("Today.Model.Models.ShoppingCart", b =>
                {
                    b.Property<int>("ShoppingCartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("購物車ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("date")
                        .HasComment("出發日期");

                    b.Property<DateTime>("JoinTime")
                        .HasColumnType("datetime")
                        .HasComment("加入購物車時間");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("數量");

                    b.Property<int>("ScreeningId")
                        .HasColumnType("int")
                        .HasComment("場次");

                    b.Property<int>("SpecificationId")
                        .HasColumnType("int");

                    b.HasKey("ShoppingCartId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ScreeningId");

                    b.HasIndex("SpecificationId");

                    b.ToTable("ShoppingCart");
                });

            modelBuilder.Entity("Today.Model.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("訂閱ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("email");

                    b.HasKey("SubscriptionId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("Today.Model.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SupplierID")
                        .HasComment("供應商ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("公司地址");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasComment("城市");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("公司名稱");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("聯繫人姓名");

                    b.Property<string>("ContactTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("聯繫人職稱");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("電話");

                    b.HasKey("SupplierId");

                    b.HasIndex("CityId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Today.Model.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TagText")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("標籤名稱");

                    b.HasKey("TagId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Today.Model.Models.Ticket", b =>
                {
                    b.Property<int>("TicketsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("電子憑證ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("狀態");

                    b.Property<string>("TicketQrcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TicketQRcode")
                        .HasComment("qrcode");

                    b.HasKey("TicketsId")
                        .HasName("PK_Tickets");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Today.Model.Models.staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("員工ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date")
                        .HasComment("生日");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("員工姓名");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("密碼");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("電話");

                    b.HasKey("StaffId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Today.Model.Models.AboutProgram", b =>
                {
                    b.HasOne("Today.Model.Models.AboutProgramOption", "AboutProgramOptions")
                        .WithMany("AboutPrograms")
                        .HasForeignKey("AboutProgramOptionsId")
                        .HasConstraintName("FK_AboutProgram_AboutProgramOptions")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Program", "Program")
                        .WithMany("AboutPrograms")
                        .HasForeignKey("ProgramId")
                        .HasConstraintName("FK_AboutProgram_Program")
                        .IsRequired();

                    b.Navigation("AboutProgramOptions");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Today.Model.Models.AboutProgramOption", b =>
                {
                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany("AboutProgramOptions")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_AboutProgramOptions_Product")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Today.Model.Models.Category", b =>
                {
                    b.HasOne("Today.Model.Models.Category", "ParentCategory")
                        .WithMany("InverseParentCategory")
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("FK_Category_Category");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Today.Model.Models.CityRaider", b =>
                {
                    b.HasOne("Today.Model.Models.City", "City")
                        .WithMany("CityRaiders")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_CityRaiders_City")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.staff", "Staff")
                        .WithMany("CityRaiders")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_CityRaiders_Staff")
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Today.Model.Models.Collect", b =>
                {
                    b.HasOne("Today.Model.Models.Member", "Member")
                        .WithMany("Collects")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Collect_Member")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany("Collects")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Collect_Product")
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Today.Model.Models.Comment", b =>
                {
                    b.HasOne("Today.Model.Models.Member", "Member")
                        .WithMany("Comments")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Comment_Member")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.OrderDetail", "OrderDetails")
                        .WithMany("Comments")
                        .HasForeignKey("OrderDetailsId")
                        .HasConstraintName("FK_Comment_OrderDetails")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Comment_Product")
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("OrderDetails");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Today.Model.Models.CouponManage", b =>
                {
                    b.HasOne("Today.Model.Models.Coupon", "Coupon")
                        .WithMany("CouponManages")
                        .HasForeignKey("CouponId")
                        .HasConstraintName("FK_CouponManage_Coupon")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Member", "Member")
                        .WithMany("CouponManages")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_CouponManage_Member")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.staff", "Staff")
                        .WithMany("CouponManages")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_CouponManage_Staff")
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Member");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Today.Model.Models.Location", b =>
                {
                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany("Locations")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Location_Product")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Today.Model.Models.LoginWay", b =>
                {
                    b.HasOne("Today.Model.Models.Member", "Member")
                        .WithMany("LoginWays")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_LoginWay_Member")
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Today.Model.Models.Member", b =>
                {
                    b.HasOne("Today.Model.Models.City", "City")
                        .WithMany("Members")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Member_City")
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Today.Model.Models.Message", b =>
                {
                    b.HasOne("Today.Model.Models.Member", "Member")
                        .WithMany("Messages")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Message_Member")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Order", "Order")
                        .WithMany("Messages")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Message_Order")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Message", "Reply")
                        .WithMany("InverseReply")
                        .HasForeignKey("ReplyId")
                        .HasConstraintName("FK_Message_Message");

                    b.Navigation("Member");

                    b.Navigation("Order");

                    b.Navigation("Reply");
                });

            modelBuilder.Entity("Today.Model.Models.Order", b =>
                {
                    b.HasOne("Today.Model.Models.Member", "Member")
                        .WithMany("Orders")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Order_Member")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK_Order_Payment")
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Today.Model.Models.OrderDetail", b =>
                {
                    b.HasOne("Today.Model.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderDetails_Order")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.ProgramSpecification", "Specification")
                        .WithMany("OrderDetails")
                        .HasForeignKey("SpecificationId")
                        .HasConstraintName("FK_OrderDetail_ProgramSpecification")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Ticket", "Tickets")
                        .WithMany("OrderDetails")
                        .HasForeignKey("TicketsId")
                        .HasConstraintName("FK_OrderDetail_Ticket")
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Specification");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Today.Model.Models.Product", b =>
                {
                    b.HasOne("Today.Model.Models.City", "City")
                        .WithMany("Products")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Product_City")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_Product_Supplier")
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Today.Model.Models.ProductCategory", b =>
                {
                    b.HasOne("Today.Model.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_ProductCategory_Category")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductCategory_Product")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Today.Model.Models.ProductPhoto", b =>
                {
                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany("ProductPhotos")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductPhoto_Product")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Today.Model.Models.ProductTag", b =>
                {
                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductTag_Product")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_ProductTag_Tag")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Today.Model.Models.Program", b =>
                {
                    b.HasOne("Today.Model.Models.Product", "Product")
                        .WithMany("Programs")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Program_Product")
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Today.Model.Models.ProgramCantUseDate", b =>
                {
                    b.HasOne("Today.Model.Models.Program", "Program")
                        .WithMany("ProgramCantUseDates")
                        .HasForeignKey("ProgramId")
                        .HasConstraintName("FK_ProgramDatePicker_Program")
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Today.Model.Models.ProgramInclude", b =>
                {
                    b.HasOne("Today.Model.Models.Program", "Program")
                        .WithMany("ProgramIncludes")
                        .HasForeignKey("ProgramId")
                        .HasConstraintName("FK_ProgramInclude_Program")
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Today.Model.Models.ProgramSpecification", b =>
                {
                    b.HasOne("Today.Model.Models.Program", "Program")
                        .WithMany("ProgramSpecifications")
                        .HasForeignKey("ProgramId")
                        .HasConstraintName("FK_ProgramSpecification_Program")
                        .IsRequired();

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Today.Model.Models.Screening", b =>
                {
                    b.HasOne("Today.Model.Models.ProgramSpecification", "Specification")
                        .WithMany("Screenings")
                        .HasForeignKey("SpecificationId")
                        .HasConstraintName("FK_Screening_ProgramSpecification")
                        .IsRequired();

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("Today.Model.Models.ShoppingCart", b =>
                {
                    b.HasOne("Today.Model.Models.Member", "Member")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_ShoppinCart_Member")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.Screening", "Screening")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("ScreeningId")
                        .HasConstraintName("FK_ShoppingCart_Screening")
                        .IsRequired();

                    b.HasOne("Today.Model.Models.ProgramSpecification", "Specification")
                        .WithMany("ShoppingCarts")
                        .HasForeignKey("SpecificationId")
                        .HasConstraintName("FK_ShoppinCart_ProgramSpecification")
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Screening");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("Today.Model.Models.Supplier", b =>
                {
                    b.HasOne("Today.Model.Models.City", "City")
                        .WithMany("Suppliers")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Supplier_City")
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Today.Model.Models.AboutProgramOption", b =>
                {
                    b.Navigation("AboutPrograms");
                });

            modelBuilder.Entity("Today.Model.Models.Category", b =>
                {
                    b.Navigation("InverseParentCategory");

                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Today.Model.Models.City", b =>
                {
                    b.Navigation("CityRaiders");

                    b.Navigation("Members");

                    b.Navigation("Products");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("Today.Model.Models.Coupon", b =>
                {
                    b.Navigation("CouponManages");
                });

            modelBuilder.Entity("Today.Model.Models.Member", b =>
                {
                    b.Navigation("Collects");

                    b.Navigation("Comments");

                    b.Navigation("CouponManages");

                    b.Navigation("LoginWays");

                    b.Navigation("Messages");

                    b.Navigation("Orders");

                    b.Navigation("ShoppingCarts");
                });

            modelBuilder.Entity("Today.Model.Models.Message", b =>
                {
                    b.Navigation("InverseReply");
                });

            modelBuilder.Entity("Today.Model.Models.Order", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Today.Model.Models.OrderDetail", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Today.Model.Models.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Today.Model.Models.Product", b =>
                {
                    b.Navigation("AboutProgramOptions");

                    b.Navigation("Collects");

                    b.Navigation("Comments");

                    b.Navigation("Locations");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductPhotos");

                    b.Navigation("ProductTags");

                    b.Navigation("Programs");
                });

            modelBuilder.Entity("Today.Model.Models.Program", b =>
                {
                    b.Navigation("AboutPrograms");

                    b.Navigation("ProgramCantUseDates");

                    b.Navigation("ProgramIncludes");

                    b.Navigation("ProgramSpecifications");
                });

            modelBuilder.Entity("Today.Model.Models.ProgramSpecification", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Screenings");

                    b.Navigation("ShoppingCarts");
                });

            modelBuilder.Entity("Today.Model.Models.Screening", b =>
                {
                    b.Navigation("ShoppingCarts");
                });

            modelBuilder.Entity("Today.Model.Models.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Today.Model.Models.Tag", b =>
                {
                    b.Navigation("ProductTags");
                });

            modelBuilder.Entity("Today.Model.Models.Ticket", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Today.Model.Models.staff", b =>
                {
                    b.Navigation("CityRaiders");

                    b.Navigation("CouponManages");
                });
#pragma warning restore 612, 618
        }
    }
}
